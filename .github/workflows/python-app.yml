name: BioNeuralNet

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11']

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        check-latest: true

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/scripts/requirements-dev.txt', 'fast-install.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies using fast-install.py (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x fast-install.py
        ./fast-install.py --cuda --cuda-version 12.1 --dev
      shell: bash

    - name: Install dependencies using fast-install.py (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python fast-install.py --cuda --cuda-version 12.1 --dev
      shell: powershell

    - name: Verify installed Python packages (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        source ./bioneuralnet-env/bin/activate
        pip list
      shell: bash

    - name: Verify installed Python packages (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\bioneuralnet-env\Scripts\Activate.ps1
        pip list
      shell: powershell

    - name: Run tests with pytest (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        source ./bioneuralnet-env/bin/activate
        pytest --cov=bioneuralnet --cov-report=xml tests/
      shell: bash

    - name: Run tests with pytest (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\bioneuralnet-env\Scripts\Activate.ps1
        pytest --cov=bioneuralnet --cov-report=xml tests/
      shell: powershell

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
