from typing import Optional
import pandas as pd
from .base_feature_selector import BaseFeatureSelector


class FeatureSelector(BaseFeatureSelector):
    """
    FeatureSelector Class for Selecting Relevant Multi-Omics Features.

    Inherits from BaseFeatureSelector and specializes in selecting the most relevant
    multi-omics features based on embeddings generated by GNNs.
    """

    def __init__(
        self,
        enhanced_omics_data: pd.DataFrame,
        phenotype_data: pd.Series,
        num_features: int = 10,
        selection_method: str = 'correlation',
        output_dir: Optional[str] = None,
    ):
        """
        Initializes the FeatureSelector instance.

        Args:
            enhanced_omics_data (pd.DataFrame): Enhanced multi-omics dataset with integrated embeddings.
            phenotype_data (pd.Series): Phenotype data corresponding to the samples.
            num_features (int, optional): Number of top features to select. Defaults to 10.
            selection_method (str, optional): Feature selection method ('correlation', 'lasso', 'random_forest'). Defaults to 'correlation'.
            output_dir (str, optional): Directory to save selected features. If None, creates a unique directory.
        """
        super().__init__(
            num_features=num_features,
            selection_method=selection_method,
            output_dir=output_dir
        )
        self.enhanced_omics_data = enhanced_omics_data
        self.phenotype_data = phenotype_data
        self.logger.info("Initialized FeatureSelector.")

    def run_feature_selection(self) -> pd.DataFrame:
        """
        Executes the feature selection process on the enhanced omics data.

        Steps:
            1. Perform feature selection using the specified method.
            2. Save the selected features.

        Returns:
            pd.DataFrame: DataFrame containing the selected multi-omics features.
        """
        self.logger.info("Starting feature selection on enhanced omics data.")
        selected_features = self.perform_feature_selection(self.enhanced_omics_data, self.phenotype_data)
        self.save_selected_features(selected_features, filename="selected_genetic_features.csv")
        self.logger.info("Feature selection on enhanced omics data completed successfully.")
        return selected_features
